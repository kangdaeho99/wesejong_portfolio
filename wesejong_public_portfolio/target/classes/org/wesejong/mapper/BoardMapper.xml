<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.wesejong.mapper.BoardMapper">


<!-- 
검색어:spring mybatis unread
-https://stage-diary.tistory.com/594
검색어:error while adding the mapper 'interface
-https://www.programmersought.com/article/70636151324/

 -->
<!--
mysql에서 TEXT 컬럼을 읽어오기 위해서 VARCHAR로 변환
 resultMap을 사용하는 이유는 content에 longtext 자료형을 사용하는데
mysql에서는 varchar로만 받기 때문입니다.
이과정에서 resultMap을 사용해서 변환시켜주는데,
Mapper함수에서 resultType="int" -> resultMap="boardMap"
인것을 잊지않습니다.
 -->
 
<!-- select
tbl_board.bno,
tbl_board.title,
tbl_board.content,
tbl_board.writer,
tbl_board.regdate,
tbl_board.updatedate,
tbl_board.viewcnt,
tbl_board.deleted,
boardattachimage.boardattachimage_seq,
boardattachimage.boardattachimage_uploadpath,
boardattachimage.boardattachimage_uuid
from
tbl_board
left join boardattachimage on tbl_board.bno = boardattachimage.bno
where tbl_board.bno = 230 -->
	<resultMap type="org.wesejong.domain.BoardVO" id="boardMap">
		<id property="bno" column="bno"/>
		<result property="bno" column="bno"/>
		<result property="board_id" column="board_id"/>
		<result property="title" column="title"/>
		<result property="content" column="content" jdbcType="VARCHAR" javaType="java.lang.String"/>
		<result property="writer" column="writer"/>
		<result property="anonymous" column="anonymous"/>
		<result property="bno" column="bno"/>
		<result property="regdate" column="regdate" />
    	<result property="updatedate" column="updatedate" />
    	<result property="viewcount" column="viewcount" />
    	<result property="boardlikecount" column="boardlikecount" />
    	<result property="boarddislikecount" column="boarddislikecount" />
    	<result property="boardreply_count" column="boardreply_count" />
    	
    	<result property="deleted" column="deleted" />
    	<result property="notice" column="notice" />
    	
    	<result property="mem_seq" column="mem_seq" />
    	<collection property="boardattachimagefilelist" resultMap="boardattachimageMap">
    	</collection>
	</resultMap>
	
	<resultMap type="org.wesejong.domain.BoardAttachImageVO" id="boardattachimageMap">
		<result property="boardattachimage_seq" column="boardattachimage_seq"/>
		<result property="boardattachimage_uploadpath" column="boardattachimage_uploadpath"/>
		<result property="boardattachimage_uuid" column="boardattachimage_uuid"/>
		
		<result property="bno" column="bno"/>
	</resultMap>

<!-- tbl_board type으로 만들었던 것입니다. -->
<!-- 
<select id="getList" resultMap="boardMap">
<![CDATA[
select * from tbl_board where bno > 0
]]>
</select>
 -->
<select id="getList" resultMap="boardMap">
<![CDATA[
select * from board where bno > 0 and board_id = #{board_id}
]]>
</select>

<!-- <select id="getList_by_bno_limit_0_5" resultMap="boardMap">
<![CDATA[
select * from board where bno > 0 and board_id = #{board_id} order by bno desc limit 0,5 
]]>
</select> -->

<select id="getList_by_bno_limit_0_5" resultMap="boardMap">
    
    <![CDATA[
			select
			board.bno,
			board.board_id,
			board.title,
			board.content,
			board.writer,
			board.anonymous,
			board.ip,
			board.regdate,
			board.updatedate,
			board.viewcount,
			board.boardlikecount,
			board.boarddislikecount,
			board.boardreply_count,
			board.deleted,
			board.notice,
			boardattachimage.boardattachimage_seq,
			boardattachimage.boardattachimage_uploadpath,
			boardattachimage.boardattachimage_uuid
			from
			board
			left join boardattachimage on board.bno = boardattachimage.bno
			where board_id = #{board_id}
	
			order by bno desc
			limit 0,5
	]]>
</select>






<select id="getList_by_bno_and_boardlikecount_bigger_than_ten_limit_0_5" resultMap="boardMap">
<![CDATA[
select * from board where bno > 0 and boardlikecount > 9 order by bno desc limit 0,5  
]]>
</select>

<select id="getList_by_bno_limit_0_5_get_allpost" resultMap="boardMap">
<![CDATA[
select * from board where bno > 0 order by bno desc limit 0,5  
]]>
</select>

 <select id="getListWithPaging_without_boardattachimage" resultType="org.wesejong.domain.BoardVO">
    
    <![CDATA[
		select
              * 
       from tbl_board 
       
       
	]]>
	<include refid="criteria"></include>
        
        <![CDATA[
        	order by bno desc
            limit
		    #{first},#{amount}
        ]]>

</select>
<!-- tbl_board type으로 만들었던 페이징 처리입니다. -->
<!-- 
 <select id="getListWithPaging_with_boardattachimage" resultMap="boardMap">
    
    <![CDATA[
			select
			tbl_board.bno,
			tbl_board.title,
			tbl_board.content,
			tbl_board.writer,
			tbl_board.regdate,
			tbl_board.updatedate,
			tbl_board.viewcnt,
			tbl_board.deleted,
			boardattachimage.boardattachimage_seq,
			boardattachimage.boardattachimage_uploadpath,
			boardattachimage.boardattachimage_uuid
			from
			tbl_board
			left join boardattachimage on tbl_board.bno = boardattachimage.bno
			
	]]>
	<include refid="criteria"></include>
        
        <![CDATA[
        	order by bno desc
            limit
		    #{first},#{amount}
        ]]>

</select>

 -->

<!-- board에서 boardmanage없이 진행한 sql입니다. --> 
<!-- 
<select id="getListWithPaging_with_boardattachimage" resultMap="boardMap">
    
    <![CDATA[
			select
			board.bno,
			board.board_id,
			board.title,
			board.content,
			board.writer,
			board.ip,
			board.regdate,
			board.updatedate,
			board.viewcnt,
			board.likecnt,
			board.dislikecnt,
			board.reply_cnt,
			board.deleted,
			boardattachimage.boardattachimage_seq,
			boardattachimage.boardattachimage_uploadpath,
			boardattachimage.boardattachimage_uuid
			from
			board
			left join boardattachimage on board.bno = boardattachimage.bno
	]]>
	<include refid="criteria"></include>
        
        <![CDATA[
        	order by bno desc
            limit
		    #{first},#{amount}
        ]]>

</select>
 -->
<select id="getListWithPaging_with_boardmanage_boardattachimage" resultMap="boardMap">
    
    <![CDATA[
			select
			board.bno,
			board.board_id,
			board.title,
			board.content,
			board.writer,
			board.anonymous,
			board.ip,
			board.regdate,
			board.updatedate,
			board.viewcount,
			board.boardlikecount,
			board.boarddislikecount,
			board.boardreply_count,
			board.deleted,
			board.notice,
			boardattachimage.boardattachimage_seq,
			boardattachimage.boardattachimage_uploadpath,
			boardattachimage.boardattachimage_uuid
			from
			board
			left join boardattachimage on board.bno = boardattachimage.bno
			where board_id = #{boardmanagevo.board_id}
	]]>
	<include refid="criteria_with_boardmanage"></include>

        <![CDATA[
        	order by notice desc, bno desc
            limit
		    #{cri.first},#{cri.amount}
        ]]>

</select>

<select id="getListWithPaging_with_boardmanage_boardattachimage_by_bno_and_boardlikecount_bigger_than_ten" resultMap="boardMap">
    
    <![CDATA[
			select
			board.bno,
			board.board_id,
			board.title,
			board.content,
			board.writer,
			board.anonymous,
			board.ip,
			board.regdate,
			board.updatedate,
			board.viewcount,
			board.boardlikecount,
			board.boarddislikecount,
			board.boardreply_count,
			board.deleted,
			board.notice,
			boardattachimage.boardattachimage_seq,
			boardattachimage.boardattachimage_uploadpath,
			boardattachimage.boardattachimage_uuid
			from
			board
			left join boardattachimage on board.bno = boardattachimage.bno
			where boardlikecount > 9
	]]>
	<include refid="criteria_with_boardmanage"></include>

        <![CDATA[
        	order by notice desc, bno desc
            limit
		    #{cri.first},#{cri.amount}
        ]]>

</select>

<select id="getListWithPaging_with_boardmanage_boardattachimage_get_allpost" resultMap="boardMap">
    
    <![CDATA[
			select
			board.bno,
			board.board_id,
			board.title,
			board.content,
			board.writer,
			board.anonymous,
			board.ip,
			board.regdate,
			board.updatedate,
			board.viewcount,
			board.boardlikecount,
			board.boarddislikecount,
			board.boardreply_count,
			board.deleted,
			board.notice,
			boardattachimage.boardattachimage_seq,
			boardattachimage.boardattachimage_uploadpath,
			boardattachimage.boardattachimage_uuid
			from
			board
			left join boardattachimage on board.bno = boardattachimage.bno
			where board.bno > 0
	]]>
	<include refid="criteria_with_boardmanage"></include>

        <![CDATA[
        	order by notice desc, bno desc
            limit
		    #{cri.first},#{cri.amount}
        ]]>

</select>

<!-- select
board.bno,
board.board_id,
board.title,
board.content,
board.writer,
board.ip,
board.regdate,
board.updatedate,
board.viewcount,
board.boardlikecount,
board.boarddislikecount,
board.boardreply_count,
board.deleted,
boardattachimage.boardattachimage_seq,
boardattachimage.boardattachimage_uploadpath,
boardattachimage.boardattachimage_uuid
from
board
left join boardattachimage on board.bno = boardattachimage.bno
where board_id = 1
and (title like '%내가%')
order by bno desc
limit 0, 15;
 -->
<select id="getList_by_mem_seq" resultMap="boardMap">
<![CDATA[
select * from board where bno > 0 and mem_seq = #{mem_seq} order by bno desc
]]>
</select>


<!-- tbl_board 삽입 sql입니다.-->
<!-- 
<insert id="insert">
	insert into tbl_board (title, content, writer)
	values (#{title}, #{content}, #{writer})
</insert>
 -->
<insert id="insert">
	insert into board (board_id, title, content, writer, mem_seq)
	values (#{board_id}, #{title}, #{content}, #{writer}, #{mem_seq})
</insert>

<!-- tbl_board 삽입 sql입니다. -->
<!-- 
<insert id="insertSelectKey">
	<selectKey keyProperty="bno" order="BEFORE" resultType="long">
		select max(bno) from tbl_board
	</selectKey>
	insert into tbl_board (bno, title, content, writer)
	values (#{bno}+1, #{title}, #{content}, #{writer})
</insert> -->
<insert id="insertSelectKey">
	<selectKey keyProperty="bno" order="BEFORE" resultType="long">
		select max(bno) from board
	</selectKey>
	insert into board (bno, board_id, title, content, writer, anonymous, mem_seq)
	values (#{bno}+1, #{board_id}, #{title}, #{content}, #{writer}, anonymous, mem_seq)
</insert>


<!-- https://aaboo.home.blog/2020/03/11/mybatis-insert-%ED%95%9C-key%EA%B0%92-%EB%B0%94%EB%A1%9C-%EB%B0%98%ED%99%98/ -->
<!-- 애초에 나는 auto_increment를 사용하는것이 아니기떄문에 그냥 max(bno)를 리턴하도록 설계해봅니다. -->
<insert id="insertSelectKey_with_boardmanage">
	<selectKey keyProperty="boardvo.bno" order="BEFORE" resultType="long">
		select max(bno) from board
	</selectKey>
	insert into board (bno, board_id, title, content, writer, anonymous, mem_seq)
	values (#{boardvo.bno}+1, #{boardmanagevo.board_id}, #{boardvo.title}, #{boardvo.content}, #{boardvo.writer}, #{boardvo.anonymous}, #{boardvo.mem_seq})
</insert>

<select id="last_insert_id" resultType="int">
	select last_insert_id()
</select>

<!-- tbl_board 데이터 읽기 sql입니다. -->
<!-- 
<select id="read" resultMap="boardMap">
	select * from tbl_board where bno = #{bno}
</select>
 -->
<select id="read" resultMap="boardMap">
	select * from board where bno = #{bno}
</select>

<!-- tbl_board 데이터 삭제 sql입니다. -->
<!-- 
<delete id="delete">
	delete from tbl_board where bno = #{bno}
</delete>
 -->
<delete id="delete">
	delete from board where bno = #{bno}
</delete>

<delete id="delete_by_bno">
	delete from board where bno = #{bno}
</delete>


<!-- tbl_board 데이터 수정 sql입니다. -->
<!-- 
<update id="update">
	update tbl_board
	set title = #{title},
	content=#{content},
	writer=#{writer},
	updateDate = sysdate
	where bno = #{bno}
</update> 
-->

<update id="update">
	update board
	set title = #{title},
	content=#{content},
	writer=#{writer},
	updateDate = now()
	where bno = #{bno}
</update>

<update id="update_title_content_updatedate">
	update board
	set title = #{title},
	content=#{content},
	updateDate = now()
	where bno = #{bno}
</update>

<update id="update_boardreply_count_by_bno">
	update board
	set boardreply_count = #{boardreply_count}
	where bno = #{bno}
</update>

<update id="update_boardlikecount_by_bno">
	update board
	set boardlikecount = #{boardlikecount}
	where bno = #{bno}
</update>

<update id="update_boarddislikecount_by_bno">
	update board
	set boarddislikecount = #{boarddislikecount}
	where bno = #{bno}
</update>


<update id="update_viewcount_by_bno">
	update board
	set viewcount = #{viewcount} + 1
	where bno = #{bno}
</update>

 
 <!-- <trim prefix=""> 실행될 쿼리의 <trim>문 안에 쿼리 가장 앞에 붙여줍니다. -->
<!-- <trim prefixOverrides=""> 실행될 쿼리의 <trim>문 안에 쿼리 가장 앞에 해당 문자들이 있으면 지워줍니다. -->
<!-- <trim suffix=""> 실행될 쿼리의 <trim>문 안에 쿼리 가장 뒤에 붙여줍니다. -->
<!-- <trim suffixOverrides=""> 실행될 쿼리의 <trim>문 안에 쿼리 가장 뒤에 해당 문자들이 있으면 지워줍니다.  -->
<!-- 처음에 오류났던이유는  
foreach item="type"으로 지정해두어 
when test="type == 'T'.toString()
title like CONCAT('%',#{cri.keyword},'%')
이렇게 두엇어야햇는데 이전에는
foreach item="type"으로 지정해두어 
when test="cri.type == 'T'.toString()
title like CONCAT('%',#{keyword},'%')
이렇게 두었었습니다.
-->
<sql id="criteria_with_boardmanage">
	   <trim prefix="and (" suffix=")" prefixOverrides="OR">
	       <foreach item="type" collection="cri.typeArr">
	           <trim prefix="OR">
	               <choose>
	                   <when test="type == 'T'.toString()">
	                       title like CONCAT('%',#{cri.keyword},'%')
	                   </when>
	                   <when test="type == 'C'.toString()">
	                       content like CONCAT('%',#{cri.keyword},'%')
	                   </when>
	                   <when test="type == 'W'.toString()">
	                       writer like CONCAT('%',#{cri.keyword},'%')
	                   </when>     
	               </choose>
	           </trim>
	       </foreach>
	   </trim>
 </sql>
<!--  <sql id="criteria_with_boardmanage">
	   <trim prefix="and (" suffix=")" prefixOverrides="OR">
	       <foreach item="type" collection="param2.typeArr">
	           <trim prefix="OR">
	               <choose>
	                   <when test="param2.type == 'T'.toString()">
	                       title like CONCAT('%',#{param2.keyword},'%')
	                   </when>
	                   <when test="param2.type == 'C'.toString()">
	                       content like CONCAT('%',#{param2.keyword},'%')
	                   </when>
	                   <when test="param2.type == 'W'.toString()">
	                       writer like CONCAT('%',#{param2.keyword},'%')
	                   </when>     
	               </choose>
	           </trim>
	       </foreach>
	   </trim>
 </sql> -->
 
 <!-- <trim prefix=""> 실행될 쿼리의 <trim>문 안에 쿼리 가장 앞에 붙여줍니다. -->
<!-- <trim prefixOverrides=""> 실행될 쿼리의 <trim>문 안에 쿼리 가장 앞에 해당 문자들이 있으면 지워줍니다. -->
<!-- <trim suffix=""> 실행될 쿼리의 <trim>문 안에 쿼리 가장 뒤에 붙여줍니다. -->
<!-- <trim suffixOverrides=""> 실행될 쿼리의 <trim>문 안에 쿼리 가장 뒤에 해당 문자들이 있으면 지워줍니다.  -->
 <sql id="criteria">
	   <trim prefix="where (" suffix=")" prefixOverrides="OR">
	       <foreach item="type" collection="cri.typeArr">
	           <trim prefix="OR">
	               <choose>
	                   <when test="type == 'T'.toString()">
	                       title like CONCAT('%',#{keyword},'%')
	                   </when>
	                   <when test="type == 'C'.toString()">
	                       content like CONCAT('%',#{keyword},'%')
	                   </when>
	                   <when test="type == 'W'.toString()">
	                       writer like CONCAT('%',#{keyword},'%')
	                   </when>     
	               </choose>
	           </trim>
	       </foreach>
	   </trim>
 </sql>
<!-- tbl_board용 데이터 개수 count하는 sql입니다. -->
<!--  
 <select id="getTotalCount" resultType="int">
    <![CDATA[
     	select
     		count(*)
     	from
     		tbl_board
	]]>
    <include refid="criteria"></include>
    
 
</select> 
 -->
 <select id="getTotalCount_with_boardmanage" resultType="int">
    <![CDATA[
     	select
     		count(*)
     	from
     		board
     	where board_id = #{boardmanagevo.board_id}
	]]>
    <include refid="criteria_with_boardmanage"></include>
</select> 

 <select id="getTotalCount_with_boardmanage_by_bno_and_boardlikecount_bigger_than_ten" resultType="int">
    <![CDATA[
     	select
     		count(*)
     	from
     		board
     	where boardlikecount > 9
	]]>
    <include refid="criteria_with_boardmanage"></include>
</select> 

 <select id="getTotalCount_with_boardmanage_boardattachimage_get_allpost" resultType="int">
    <![CDATA[
     	select
     		count(*)
     	from
     		board
     	where bno > 0
	]]>
    <include refid="criteria_with_boardmanage"></include>
</select> 

<select id="getExists_by_board_id_and_regdate_yesterday_to_today" resultType="int">
<![CDATA[
	select exists
		(select * from board where board_id = #{board_id} and regdate >= date_sub(now(), INTERVAL 1 day) and regdate <= now())
	as existence 
]]>
</select>

<select id="getExists_by_board_id_and_regdate_yesterday_to_today_allpost" resultType="int">
<![CDATA[
	select exists
		(select * from board where board_id > 0 and regdate >= date_sub(now(), INTERVAL 1 day) and regdate <= now())
	as existence 
]]>
</select>

<!-- /////////////////////
//AdminBoard용    //
///////////////////// -->

<select id="getList_limit_0_300" resultMap="boardMap">
<![CDATA[
select * from board where bno > 0 order by bno desc limit 0,300
]]>
</select>

<select id="getboardnoticeList_limit_0_300" resultMap="boardMap">
<![CDATA[
select * from board where bno > 0 and notice = 1 order by bno desc limit 0,300
]]>
</select>

<update id="update_board_id_title_content_notice">
	update board
	set board_id = #{board_id},
	title=#{title},
	content=#{content},
	notice=#{notice},
	updateDate = now()
	where bno = #{bno}
</update>

 
</mapper>